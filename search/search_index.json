{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Compose Modifier Extension General settings for the modifier and custom features Connection repositories { maven(\"https://artifactory.keygenqt.com/artifactory/open-source\") } dependencies { implementation(\"com.keygenqt.modifier:compose-modifier-ext:{version}\") } Features Item List Collapse Clickable Disable scroll Boolean modification License Copyright 2022 Vitaliy Zarubin Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#compose-modifier-extension","text":"General settings for the modifier and custom features","title":"Compose Modifier Extension"},{"location":"#connection","text":"repositories { maven(\"https://artifactory.keygenqt.com/artifactory/open-source\") } dependencies { implementation(\"com.keygenqt.modifier:compose-modifier-ext:{version}\") }","title":"Connection"},{"location":"#features","text":"Item List Collapse Clickable Disable scroll Boolean modification","title":"Features"},{"location":"#license","text":"Copyright 2022 Vitaliy Zarubin Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"boolean/","text":"ifTrue Modifier check bool is TRUE for set params inline fun Modifier.ifTrue(value: Boolean, crossinline block: Modifier.() -> Modifier) = then(if (value) block.invoke(this) else this) ifFalse Modifier check bool is FALSE for set params inline fun Modifier.ifFalse(value: Boolean, crossinline block: Modifier.() -> Modifier) = then(if (!value) block.invoke(this) else this) Usage var isEnabled by remember { mutableStateOf(true) } Text( text = \"TEXT\", modifier = Modifier .clickable { isEnabled = !isEnabled } .ifFalse(isEnabled) { padding(30.dp) } .ifTrue(isEnabled) { background(Color.Red) }, )","title":"Boolean modification"},{"location":"boolean/#iftrue","text":"Modifier check bool is TRUE for set params inline fun Modifier.ifTrue(value: Boolean, crossinline block: Modifier.() -> Modifier) = then(if (value) block.invoke(this) else this)","title":"ifTrue"},{"location":"boolean/#iffalse","text":"Modifier check bool is FALSE for set params inline fun Modifier.ifFalse(value: Boolean, crossinline block: Modifier.() -> Modifier) = then(if (!value) block.invoke(this) else this)","title":"ifFalse"},{"location":"boolean/#usage","text":"var isEnabled by remember { mutableStateOf(true) } Text( text = \"TEXT\", modifier = Modifier .clickable { isEnabled = !isEnabled } .ifFalse(isEnabled) { padding(30.dp) } .ifTrue(isEnabled) { background(Color.Red) }, )","title":"Usage"},{"location":"clickable/","text":"Handling clicks noRippleClickable No ripple clickable inline fun Modifier.noRippleClickable(crossinline onClick: () -> Unit) = composed { val interactionSource by remember { mutableStateOf(MutableInteractionSource()) } clickable( indication = null, interactionSource = interactionSource ) { onClick() } } interceptionClickable Interception of a click fun Modifier.interceptionClickable(): Modifier = composed { clickable( indication = null, interactionSource = remember { MutableInteractionSource() } ) {} }","title":"Clickable"},{"location":"clickable/#norippleclickable","text":"No ripple clickable inline fun Modifier.noRippleClickable(crossinline onClick: () -> Unit) = composed { val interactionSource by remember { mutableStateOf(MutableInteractionSource()) } clickable( indication = null, interactionSource = interactionSource ) { onClick() } }","title":"noRippleClickable"},{"location":"clickable/#interceptionclickable","text":"Interception of a click fun Modifier.interceptionClickable(): Modifier = composed { clickable( indication = null, interactionSource = remember { MutableInteractionSource() } ) {} }","title":"interceptionClickable"},{"location":"disable_scroll/","text":"Disable vertical scroll. Work with HorizontalPager disableVerticalScroll Disable vertical scroll fun Modifier.disableVerticalScroll() = this.nestedScroll(object : NestedScrollConnection { override fun onPreScroll(available: Offset, source: NestedScrollSource) = available.copy(x = 0f) }) disableHorizontalScroll Disable horizontal scroll fun Modifier.disableHorizontalScroll() = this.nestedScroll(object : NestedScrollConnection { override fun onPreScroll(available: Offset, source: NestedScrollSource) = available.copy(y = 0f) }) Usage HorizontalPager( modifier = Modifier.disableHorizontalScroll(), state = pages.state, count = pages.count ) { page -> when (page) { pages.step1 -> OnboardingStep1() pages.step2 -> OnboardingStep2() pages.step3 -> OnboardingStep3() pages.step4 -> OnboardingStep4() pages.step5 -> OnboardingStep5() } }","title":"Disable scroll"},{"location":"disable_scroll/#disableverticalscroll","text":"Disable vertical scroll fun Modifier.disableVerticalScroll() = this.nestedScroll(object : NestedScrollConnection { override fun onPreScroll(available: Offset, source: NestedScrollSource) = available.copy(x = 0f) })","title":"disableVerticalScroll"},{"location":"disable_scroll/#disablehorizontalscroll","text":"Disable horizontal scroll fun Modifier.disableHorizontalScroll() = this.nestedScroll(object : NestedScrollConnection { override fun onPreScroll(available: Offset, source: NestedScrollSource) = available.copy(y = 0f) })","title":"disableHorizontalScroll"},{"location":"disable_scroll/#usage","text":"HorizontalPager( modifier = Modifier.disableHorizontalScroll(), state = pages.state, count = pages.count ) { page -> when (page) { pages.step1 -> OnboardingStep1() pages.step2 -> OnboardingStep2() pages.step3 -> OnboardingStep3() pages.step4 -> OnboardingStep4() pages.step5 -> OnboardingStep5() } }","title":"Usage"},{"location":"item_collapse/","text":"Collapse list item animation fun Modifier.graphicsCollapse( state: LazyListState ) = this.composed { var scrolledY by remember { mutableStateOf(0f) } var previousOffset by remember { mutableStateOf(0) } graphicsLayer { scrolledY += state.firstVisibleItemScrollOffset - previousOffset translationY = scrolledY * 0.5f previousOffset = state.firstVisibleItemScrollOffset } } Usage val state: LazyListState = rememberLazyListState(), LazyColumn( state = state ) { item { Column( modifier = Modifier.graphicsCollapse(lazyListState) ) { } } }","title":"Item List Collapse"},{"location":"item_collapse/#usage","text":"val state: LazyListState = rememberLazyListState(), LazyColumn( state = state ) { item { Column( modifier = Modifier.graphicsCollapse(lazyListState) ) { } } }","title":"Usage"}]}